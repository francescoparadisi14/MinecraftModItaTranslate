{
    "emi.category.emi_loot.archaeology_drops": "Archaeology Loot",
    "emi.category.emi_loot.block_drops": "Block Drops",
    "emi.category.emi_loot.chest_loot": "Chest Loot",
    "emi.category.emi_loot.gameplay_drops": "Gameplay Drops",
    "emi.category.emi_loot.mob_drops": "Mob Drops",
    "emi_loot.and": "&",
    "emi_loot.archaeology.minecraft:archaeology\/desert_pyramid": "Desert Pyramid",
    "emi_loot.archaeology.minecraft:archaeology\/desert_well": "Desert Well",
    "emi_loot.archaeology.minecraft:archaeology\/ocean_ruin_cold": "Cold Ocean Ruins",
    "emi_loot.archaeology.minecraft:archaeology\/ocean_ruin_warm": "Warm Ocean Ruins",
    "emi_loot.archaeology.minecraft:archaeology\/trail_ruins_common": "Common Trail Ruins",
    "emi_loot.archaeology.minecraft:archaeology\/trail_ruins_rare": "Rare Trail Ruins",
    "emi_loot.archaeology.unknown": "Unknown",
    "emi_loot.archaeology.unknown_archaeology": "%s Archaeology Findings",
    "emi_loot.axe.diamond": "Needs or prefers a diamond+ axe",
    "emi_loot.axe.iron": "Needs or prefers a iron+ axe",
    "emi_loot.axe.netherite": "Needs or prefers a netherite+ axe",
    "emi_loot.axe.stone": "Needs or prefers a stone+ axe",
    "emi_loot.axe.wood": "Needs or prefers any axe",
    "emi_loot.block_predicate.base": "a block %s",
    "emi_loot.block_predicate.list_1": "that is %s",
    "emi_loot.block_predicate.nbt": "with nbt matching %s",
    "emi_loot.block_predicate.tag": "in tag %s",
    "emi_loot.chest.minecraft:chests\/abandoned_mineshaft": "Abandoned Mineshaft Chest",
    "emi_loot.chest.minecraft:chests\/ancient_city": "Ancient City Chest",
    "emi_loot.chest.minecraft:chests\/ancient_city_ice_box": "Ancient City Icebox Chest",
    "emi_loot.chest.minecraft:chests\/bastion_bridge": "Bastion Bridge Unit Chest",
    "emi_loot.chest.minecraft:chests\/bastion_hoglin_stable": "Bastion Hoglin Stable Chest",
    "emi_loot.chest.minecraft:chests\/bastion_other": "Bastion Misc. Chest",
    "emi_loot.chest.minecraft:chests\/bastion_treasure": "Bastion Treasure Chest",
    "emi_loot.chest.minecraft:chests\/buried_treasure": "Buried Treasure",
    "emi_loot.chest.minecraft:chests\/desert_pyramid": "Desert Temple Chest",
    "emi_loot.chest.minecraft:chests\/end_city_treasure": "End City Treasure",
    "emi_loot.chest.minecraft:chests\/igloo_chest": "Igloo Chest",
    "emi_loot.chest.minecraft:chests\/jungle_temple": "Jungle Temple Chest",
    "emi_loot.chest.minecraft:chests\/jungle_temple_dispenser": "Jungle Temple Dispenser",
    "emi_loot.chest.minecraft:chests\/nether_bridge": "Nether Fortress Chest",
    "emi_loot.chest.minecraft:chests\/pillager_outpost": "Pillager Outpost Chest",
    "emi_loot.chest.minecraft:chests\/ruined_portal": "Ruined Portal Chest",
    "emi_loot.chest.minecraft:chests\/shipwreck_map": "Shipwreck Map Chest",
    "emi_loot.chest.minecraft:chests\/shipwreck_supply": "Shipwreck Supplies Chest",
    "emi_loot.chest.minecraft:chests\/shipwreck_treasure": "Shipwreck Treasure Chest",
    "emi_loot.chest.minecraft:chests\/simple_dungeon": "Dungeon Chest",
    "emi_loot.chest.minecraft:chests\/spawn_bonus_chest": "Spawn Bonus Chest",
    "emi_loot.chest.minecraft:chests\/stronghold_corridor": "Stronghold Corridor Chest",
    "emi_loot.chest.minecraft:chests\/stronghold_crossing": "Stronghold Crossings Chest",
    "emi_loot.chest.minecraft:chests\/stronghold_library": "Stronghold Library Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/corridor": "Trial Chamber Corridor Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/entrance": "Trial Chamber Entrance Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/intersection": "Trial Chamber Intersection Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/intersection_barrel": "Trial Chamber Intersection Barrel",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/reward": "Trial Chamber Reward Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/reward_ominous": "Trial Chamber Ominous Reward Chest",
    "emi_loot.chest.minecraft:chests\/trial_chambers\/supply": "Trial Chamber Supply Chest",
    "emi_loot.chest.minecraft:chests\/underwater_ruin_big": "Large Underwater Ruins Chest",
    "emi_loot.chest.minecraft:chests\/underwater_ruin_small": "Small Underwater Ruins Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_armorer": "Armorer's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_butcher": "Butcher's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_cartographer": "Cartographer's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_desert_house": "Desert House Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_fisher": "Fisherman's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_fletcher": "Fletcher's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_mason": "Mason's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_plains_house": "Plains House Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_savanna_house": "Savanna House Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_shepherd": "Shepherd's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_snowy_house": "Snowy House Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_taiga_house": "Taiga House Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_tannery": "Leatherworker's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_temple": "Cleric's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_toolsmith": "Toolsmith's Chest",
    "emi_loot.chest.minecraft:chests\/village\/village_weaponsmith": "Weaponsmith's Chest",
    "emi_loot.chest.minecraft:chests\/woodland_mansion": "Woodland Mansion Chest",
    "emi_loot.chest.minecraft:dispensers\/trial_chambers\/chamber": "Trial Chamber Main Chamber Dispenser",
    "emi_loot.chest.minecraft:dispensers\/trial_chambers\/corridor": "Trial Chamber Corridor Dispenser",
    "emi_loot.chest.minecraft:dispensers\/trial_chambers\/water": "Trial Chamber Water Dispenser",
    "emi_loot.chest.minecraft:pots\/trial_chambers\/corridor": "Trial Chamber Corridor Pot",
    "emi_loot.chest.minecraft:spawners\/ominous\/trial_chamber\/consumables": "Trial Chamber Ominous Spawner Consumables Loot",
    "emi_loot.chest.minecraft:spawners\/ominous\/trial_chamber\/key": "Trial Chamber Ominous Spawner Key Loot",
    "emi_loot.chest.minecraft:spawners\/trial_chamber\/consumables": "Trial Chamber Spawner Consumables Loot",
    "emi_loot.chest.minecraft:spawners\/trial_chamber\/items_to_drop_when_ominous": "Trial Chamber Spawner Ominous Loot",
    "emi_loot.chest.minecraft:spawners\/trial_chamber\/key": "Trial Chamber Spawner Key Loot",
    "emi_loot.chest.unknown": "Unknown",
    "emi_loot.chest.unknown_chest": "%s Loot Chest",
    "emi_loot.color_name": "%1$s %2$s",
    "emi_loot.condition.all_of": "%s",
    "emi_loot.condition.all_of_2": "%1$s and %2$s",
    "emi_loot.condition.all_of_3": "%s,",
    "emi_loot.condition.all_of_3a": "%s, and",
    "emi_loot.condition.any_of": "%s",
    "emi_loot.condition.any_of_2": "%1$s or %2$s",
    "emi_loot.condition.any_of_3": "%s,",
    "emi_loot.condition.any_of_3a": "%s, or",
    "emi_loot.condition.blockstate": "Needs a block %s",
    "emi_loot.condition.blockstate.block": "that is %s",
    "emi_loot.condition.chance": "Drops %s%% of the time",
    "emi_loot.condition.chance_looting": "%1$s%% + %2$s based on %3$s",
    "emi_loot.condition.creeper": "Drops when this mob is blown up by a charged creeper",
    "emi_loot.condition.damage_source": "Killed by %s",
    "emi_loot.condition.direct_drop": "Directly dropped without using a loot table",
    "emi_loot.condition.entity_props": "Drops when %s",
    "emi_loot.condition.entity_scores": "drops if an entity has a certain scoreboard score",
    "emi_loot.condition.invert": "NOT: %s",
    "emi_loot.condition.killed_player": "Drops when killed by a player",
    "emi_loot.condition.location": "Drops in certain locations\/multiblocks",
    "emi_loot.condition.match_tool": "Needs item %s",
    "emi_loot.condition.reference": "Dropped if custom un-parsable predicate %s is met",
    "emi_loot.condition.spawns_with": "Drops if it was spawned naturally with the mob",
    "emi_loot.condition.survives_explosion": "Must survive explosion",
    "emi_loot.condition.table_bonus": "Drops increased with %s",
    "emi_loot.condition.thundering_false": "Drops when it is not thundering",
    "emi_loot.condition.thundering_true": "Drops when it is thundering",
    "emi_loot.condition.time_check": "Dropped if the time is %s",
    "emi_loot.condition.time_check_period": "Dropped if the time in a %1$s tick period is %2$s",
    "emi_loot.condition.value_check": "Dropped if %1$s is %2$s",
    "emi_loot.condition.weather_check": "Only dropped if it is %s",
    "emi_loot.condition.weather_check.raining_false": "not raining",
    "emi_loot.condition.weather_check.raining_true": "raining",
    "emi_loot.condition.weather_check.thundering_false": "not thundering",
    "emi_loot.condition.weather_check.thundering_true": "thundering",
    "emi_loot.condition.wither_kill": "Mobs killed by the Wither drop this",
    "emi_loot.damage_predicate.bypass_armor_false": "non-armor-piercing damage",
    "emi_loot.damage_predicate.bypass_armor_true": "armor-piercing damage",
    "emi_loot.damage_predicate.explosion_false": "a non-explosion",
    "emi_loot.damage_predicate.explosion_true": "an explosion",
    "emi_loot.damage_predicate.fire_false": "non-fire damage",
    "emi_loot.damage_predicate.fire_true": "fire damage",
    "emi_loot.damage_predicate.lightning_false": "non-lightning damage",
    "emi_loot.damage_predicate.lightning_true": "lightning damage",
    "emi_loot.damage_predicate.magic_false": "non-magic damage",
    "emi_loot.damage_predicate.magic_true": "magic damage",
    "emi_loot.damage_predicate.no_invulnerable_false": "damage that doesn't bypass invulnerability",
    "emi_loot.damage_predicate.no_invulnerable_true": "damage that bypasses invulnerability",
    "emi_loot.damage_predicate.projectile_false": "a non-projectile",
    "emi_loot.damage_predicate.projectile_true": "a projectile",
    "emi_loot.damage_predicate.unblockable_false": "blockable damage",
    "emi_loot.damage_predicate.unblockable_true": "unblockable damage",
    "emi_loot.emi_loot_config": "EMI Loot Config",
    "emi_loot.emi_loot_config.chanceDecimalPlaces": "Chance Decimal Places",
    "emi_loot.emi_loot_config.chanceDecimalPlaces.desc": "How many decimal places show on chances or weights (5.123%, 5.1%, 5%, etc.)",
    "emi_loot.emi_loot_config.chestLootAlwaysStackSame": "Stack Chest Pools",
    "emi_loot.emi_loot_config.chestLootAlwaysStackSame.desc": "If true, chest and archaeology pages will always condense stacks that are equivalent in drop chance. If false, stacks will be spread out if there are fewer than 48 of them.",
    "emi_loot.emi_loot_config.compactLoot": "Compact Loot Options",
    "emi_loot.emi_loot_config.compactLoot.archaeology": "Archaeology Loot",
    "emi_loot.emi_loot_config.compactLoot.archaeology.desc": "If true, the recipe will arrange stack closer together.",
    "emi_loot.emi_loot_config.compactLoot.block": "Block Loot",
    "emi_loot.emi_loot_config.compactLoot.block.desc": "If true, the recipe will try to collect like pools into 'lists'. If false, every stack will be displayed separately if feasible.",
    "emi_loot.emi_loot_config.compactLoot.chest": "Chest Loot",
    "emi_loot.emi_loot_config.compactLoot.chest.desc": "If true, the recipe will arrange stack closer together.",
    "emi_loot.emi_loot_config.compactLoot.desc": "Options for whether individual loot recipe categories are 'compacted' or not. Compaction will push stacks closer, and lump like loot pools into 'lists' where possible",
    "emi_loot.emi_loot_config.compactLoot.gameplay": "Gameplay Loot",
    "emi_loot.emi_loot_config.compactLoot.gameplay.desc": "If true, the recipe will try to collect like pools into 'lists'. If false, every stack will be displayed separately if feasible.",
    "emi_loot.emi_loot_config.compactLoot.mob": "Mob Loot",
    "emi_loot.emi_loot_config.compactLoot.mob.desc": "If true, the recipe will try to collect like pools into 'lists'. If false, every stack will be displayed separately if feasible.",
    "emi_loot.emi_loot_config.conditionStyle": "Condition Style",
    "emi_loot.emi_loot_config.conditionStyle.default": "Default",
    "emi_loot.emi_loot_config.conditionStyle.default.sns": "Default",
    "emi_loot.emi_loot_config.conditionStyle.desc": "How loot conditions are visually presented in the recipe viewer",
    "emi_loot.emi_loot_config.conditionStyle.desc.default": "Will show loot conditions next to the loot pool in a grid, with hovered tooltips for each condition",
    "emi_loot.emi_loot_config.conditionStyle.desc.default.sns": "Will show loot conditions next to the loot pool in a grid, with hovered tooltips for each condition",
    "emi_loot.emi_loot_config.conditionStyle.desc.plain": "Stacks will be closely spaced like chest loot, but condition descriptions will not be visible in the recipe nor the tooltip",
    "emi_loot.emi_loot_config.conditionStyle.desc.plain.sns": "Stacks will be closely spaced like chest loot, but condition descriptions will not be visible in the recipe nor the tooltip",
    "emi_loot.emi_loot_config.conditionStyle.desc.tooltip": "Stacks will be closely spaced like chest loot, and conditions will be added to the stack tooltips",
    "emi_loot.emi_loot_config.conditionStyle.desc.tooltip.sns": "§4Tooltip mode requires 'Symbols 'n' Stuff', which is not currently installed!§r",
    "emi_loot.emi_loot_config.conditionStyle.plain": "Plain",
    "emi_loot.emi_loot_config.conditionStyle.plain.sns": "Plain",
    "emi_loot.emi_loot_config.conditionStyle.tooltip": "Tooltip",
    "emi_loot.emi_loot_config.conditionStyle.tooltip.sns": "§4§mTooltip§r",
    "emi_loot.emi_loot_config.debugMode": "Debug Mode",
    "emi_loot.emi_loot_config.debugMode.desc": "Enables Debug Mode. When enabled, there will be a lot of debug information added to the game log (a LOT). The author of EMI Loot may ask you to enable this to help debug an issue.",
    "emi_loot.emi_loot_config.debugModes": "Debug Modes",
    "emi_loot.emi_loot_config.debugModes.archaeology": "Archaeology Loot",
    "emi_loot.emi_loot_config.debugModes.block": "Block Loot",
    "emi_loot.emi_loot_config.debugModes.chest": "Chest Loot",
    "emi_loot.emi_loot_config.debugModes.desc": "Options for whether individual loot recipe categories have Debug Mode enabled or not.",
    "emi_loot.emi_loot_config.debugModes.gameplay": "Gameplay Loot",
    "emi_loot.emi_loot_config.debugModes.mob": "Mob Loot",
    "emi_loot.emi_loot_config.logUnstranslatedTables": "Untranslated Loot Table Logging",
    "emi_loot.emi_loot_config.logUnstranslatedTables.archaeology": "Archaeology Loot",
    "emi_loot.emi_loot_config.logUnstranslatedTables.chest": "Chest Loot",
    "emi_loot.emi_loot_config.logUnstranslatedTables.desc": "Options for whether individual loot recipe categories should log untranslated loot tables as warnings. This may be useful for modpack authors. Note that Block Loot and Mob Loot recipes do not use translation keys.",
    "emi_loot.emi_loot_config.logUnstranslatedTables.gameplay": "Gameplay Loot",
    "emi_loot.emi_loot_config.mobLootIncludeDirectDrops": "Include Direct Drops",
    "emi_loot.emi_loot_config.mobLootIncludeDirectDrops.desc": "Whether mob loot tables include manually added 'direct drops', such as equipment drops",
    "emi_loot.emi_loot_config.parseArchaeologyLoot": "Enable Archaeology Loot",
    "emi_loot.emi_loot_config.parseArchaeologyLoot.desc": "Whether the Archaeology EMI category is enabled",
    "emi_loot.emi_loot_config.parseBlockLoot": "Enable Block Loot",
    "emi_loot.emi_loot_config.parseBlockLoot.desc": "Whether the Block EMI category is enabled",
    "emi_loot.emi_loot_config.parseChestLoot": "Enable Chest Loot",
    "emi_loot.emi_loot_config.parseChestLoot.desc": "Whether the Chest EMI category is enabled",
    "emi_loot.emi_loot_config.parseGameplayLoot": "Enable Gameplay Loot",
    "emi_loot.emi_loot_config.parseGameplayLoot.desc": "Whether the Gameplay EMI category (fishing, bartering, etc) is enabled",
    "emi_loot.emi_loot_config.parseMobLoot": "Enable Mob Loot",
    "emi_loot.emi_loot_config.parseMobLoot.desc": "Whether the Mob EMI category is enabled",
    "emi_loot.emi_loot_config.skippedKeys": "Skipped Condition Keys",
    "emi_loot.emi_loot_config.skippedKeys.desc": "Condition keys in this set will not be synced, and thus will not appear in recipes.\nThis is a server setting, affecting all connected clients.\nThe key will still modify affected items as needed, just the visual indicators will be absent",
    "emi_loot.enchantment_value.clamped": "%1$s, clamped between %2$s and %3$s",
    "emi_loot.enchantment_value.fraction": "%1$s divided by %2$s",
    "emi_loot.enchantment_value.level_squared": "the square of level + %s",
    "emi_loot.enchantment_value.linear": "%1$s and then %2$s per level",
    "emi_loot.enchantment_value.linear.simple": "%2$s per level",
    "emi_loot.enchantment_value.lookup": "a lookup value from %s",
    "emi_loot.entity_predicate.baby_false": "isn't a baby",
    "emi_loot.entity_predicate.baby_true": "is a baby",
    "emi_loot.entity_predicate.base": "an entity %1$s",
    "emi_loot.entity_predicate.distance_abs": "between %1$s & %2$s blocks away",
    "emi_loot.entity_predicate.distance_abs.at_least": "at least %1$s blocks away",
    "emi_loot.entity_predicate.distance_abs.at_most": "at most %1$s blocks away",
    "emi_loot.entity_predicate.distance_abs.exact": "exactly %1$s blocks away",
    "emi_loot.entity_predicate.distance_any": "any distance away",
    "emi_loot.entity_predicate.distance_hor": "between %1$s & %2$s blocks away horizontally",
    "emi_loot.entity_predicate.distance_hor.at_least": "at least %1$s blocks away horizontally",
    "emi_loot.entity_predicate.distance_hor.at_most": "at most %1$s blocks away horizontally",
    "emi_loot.entity_predicate.distance_hor.exact": "exactly %1$s blocks away horizontally",
    "emi_loot.entity_predicate.distance_x": "between %1$s & %2$s blocks away in the X axis",
    "emi_loot.entity_predicate.distance_x.at_least": "at least %1$s blocks away in the X axis",
    "emi_loot.entity_predicate.distance_x.at_most": "at most %1$s blocks away in the X axis",
    "emi_loot.entity_predicate.distance_x.exact": "exactly %1$s blocks away in the X axis",
    "emi_loot.entity_predicate.distance_y": "between %1$s & %2$s blocks away in the Y axis",
    "emi_loot.entity_predicate.distance_y.at_least": "at least %1$s blocks away in the Y axis",
    "emi_loot.entity_predicate.distance_y.at_most": "at most %1$s blocks away in the Y axis",
    "emi_loot.entity_predicate.distance_y.exact": "exactly %1$s blocks away in the Y axis",
    "emi_loot.entity_predicate.distance_z": "between %1$s & %2$s blocks away in the Z axis",
    "emi_loot.entity_predicate.distance_z.at_least": "at least %1$s blocks away in the Z axis",
    "emi_loot.entity_predicate.distance_z.at_most": "at most %1$s blocks away in the Z axis",
    "emi_loot.entity_predicate.distance_z.exact": "exactly %1$s blocks away in the Z axis",
    "emi_loot.entity_predicate.effect.ambient_false": "%s; which isn't ambient",
    "emi_loot.entity_predicate.effect.ambient_true": "%s; which is ambient",
    "emi_loot.entity_predicate.effect.amplifier": "%1$s (level %2$s)",
    "emi_loot.entity_predicate.effect.amplifier_2": "%1$s (between levels %2$s & %3$s)",
    "emi_loot.entity_predicate.effect.amplifier_3": "%1$s; which is a specific level",
    "emi_loot.entity_predicate.effect.duration": "%1$s (%2$s ticks left)",
    "emi_loot.entity_predicate.effect.duration_2": "%1$s (between %2$s & %3$s ticks left)",
    "emi_loot.entity_predicate.effect.duration_3": "%1$s; which has a specific duration remaining",
    "emi_loot.entity_predicate.effect.fallback": "%s",
    "emi_loot.entity_predicate.effect.visible_false": "%s; which isn't visible",
    "emi_loot.entity_predicate.effect.visible_true": "%s; which is visible",
    "emi_loot.entity_predicate.effect_1": "affected by %s",
    "emi_loot.entity_predicate.entity_killer": "killed by %s",
    "emi_loot.entity_predicate.entity_this": "this is %s",
    "emi_loot.entity_predicate.equipment": "with equipment in their %1$s that is %2$s",
    "emi_loot.entity_predicate.fire_false": "isn't on fire",
    "emi_loot.entity_predicate.fire_true": "is on fire",
    "emi_loot.entity_predicate.flag": "that %s",
    "emi_loot.entity_predicate.nbt": "with nbt matching %s",
    "emi_loot.entity_predicate.passenger": "with a passenger that is %s",
    "emi_loot.entity_predicate.sneak_false": "isn't sneaking",
    "emi_loot.entity_predicate.sneak_true": "is sneaking",
    "emi_loot.entity_predicate.sprint_false": "isn't sprinting",
    "emi_loot.entity_predicate.sprint_true": "is sprinting",
    "emi_loot.entity_predicate.stepping_on": "standing on a block %s",
    "emi_loot.entity_predicate.swim_false": "isn't swimming",
    "emi_loot.entity_predicate.swim_true": "is swimming",
    "emi_loot.entity_predicate.target": "targeting %s",
    "emi_loot.entity_predicate.team": "on %s team",
    "emi_loot.entity_predicate.type_any": "that is any type",
    "emi_loot.entity_predicate.type_single": "that is a %s",
    "emi_loot.entity_predicate.type_specific.axolotl": "that is a %s axolotl",
    "emi_loot.entity_predicate.type_specific.axolotl.blue": "blue",
    "emi_loot.entity_predicate.type_specific.axolotl.cyan": "cyan",
    "emi_loot.entity_predicate.type_specific.axolotl.gold": "gold",
    "emi_loot.entity_predicate.type_specific.axolotl.lucy": "lucy",
    "emi_loot.entity_predicate.type_specific.axolotl.wild": "wild",
    "emi_loot.entity_predicate.type_specific.boat": "that is a %s boat",
    "emi_loot.entity_predicate.type_specific.boat.acacia": "acacia",
    "emi_loot.entity_predicate.type_specific.boat.bamboo": "bamboo",
    "emi_loot.entity_predicate.type_specific.boat.birch": "birch",
    "emi_loot.entity_predicate.type_specific.boat.cherry": "cherry",
    "emi_loot.entity_predicate.type_specific.boat.dark_oak": "dark oak",
    "emi_loot.entity_predicate.type_specific.boat.jungle": "jungle",
    "emi_loot.entity_predicate.type_specific.boat.mangrove": "mangrove",
    "emi_loot.entity_predicate.type_specific.boat.oak": "oak",
    "emi_loot.entity_predicate.type_specific.boat.spruce": "spruce",
    "emi_loot.entity_predicate.type_specific.cat": "that is a %s cat",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:all_black": "all-black",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:black": "black",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:british_shorthair": "british shorthair",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:calico": "calico",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:jellie": "jellie",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:persian": "persian",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:ragdoll": "ragdoll",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:red": "red",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:siamese": "siamese",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:tabby": "tabby",
    "emi_loot.entity_predicate.type_specific.cat.minecraft:white": "white",
    "emi_loot.entity_predicate.type_specific.fishing_hook_false": "that wasn't in open water",
    "emi_loot.entity_predicate.type_specific.fishing_hook_true": "that was in open water",
    "emi_loot.entity_predicate.type_specific.fox": "that is a %s fox",
    "emi_loot.entity_predicate.type_specific.fox.red": "red",
    "emi_loot.entity_predicate.type_specific.fox.snow": "snow",
    "emi_loot.entity_predicate.type_specific.frog": "that is a %s frog",
    "emi_loot.entity_predicate.type_specific.frog.minecraft:cold": "cold",
    "emi_loot.entity_predicate.type_specific.frog.minecraft:temperate": "temperate",
    "emi_loot.entity_predicate.type_specific.frog.minecraft:warm": "warm",
    "emi_loot.entity_predicate.type_specific.horse": "that is a %s horse",
    "emi_loot.entity_predicate.type_specific.horse.black": "black",
    "emi_loot.entity_predicate.type_specific.horse.brown": "brown",
    "emi_loot.entity_predicate.type_specific.horse.chestnut": "chestnut",
    "emi_loot.entity_predicate.type_specific.horse.creamy": "creamy",
    "emi_loot.entity_predicate.type_specific.horse.dark_brown": "dark brown",
    "emi_loot.entity_predicate.type_specific.horse.gray": "gray",
    "emi_loot.entity_predicate.type_specific.horse.white": "white",
    "emi_loot.entity_predicate.type_specific.lightning": "that is lightning that %s",
    "emi_loot.entity_predicate.type_specific.lightning.blocks": "set %s blocks on fire",
    "emi_loot.entity_predicate.type_specific.lightning.blocks_2": "set %1$s to %2$s blocks on fire",
    "emi_loot.entity_predicate.type_specific.lightning.blocks_3": "set at least %1$s blocks on fire",
    "emi_loot.entity_predicate.type_specific.lightning.blocks_4": "set at most %1$s blocks on fire",
    "emi_loot.entity_predicate.type_specific.lightning.struck": "that struck %s",
    "emi_loot.entity_predicate.type_specific.llama": "that is a %s llama",
    "emi_loot.entity_predicate.type_specific.llama.brown": "brown",
    "emi_loot.entity_predicate.type_specific.llama.creamy": "creamy",
    "emi_loot.entity_predicate.type_specific.llama.gray": "gray",
    "emi_loot.entity_predicate.type_specific.llama.white": "white",
    "emi_loot.entity_predicate.type_specific.mooshroom": "that is a %s mooshroom",
    "emi_loot.entity_predicate.type_specific.mooshroom.brown": "brown",
    "emi_loot.entity_predicate.type_specific.mooshroom.red": "red",
    "emi_loot.entity_predicate.type_specific.painting": "that is a specific painting",
    "emi_loot.entity_predicate.type_specific.parrot": "that is a %s parrot",
    "emi_loot.entity_predicate.type_specific.parrot.blue": "blue",
    "emi_loot.entity_predicate.type_specific.parrot.gray": "gray",
    "emi_loot.entity_predicate.type_specific.parrot.green": "green",
    "emi_loot.entity_predicate.type_specific.parrot.red_blue": "red-blue",
    "emi_loot.entity_predicate.type_specific.parrot.yellow_blue": "yellow-blue",
    "emi_loot.entity_predicate.type_specific.player": "that is a player that %s",
    "emi_loot.entity_predicate.type_specific.player.adv.crit_base": "%1$s in the %2$s advancement",
    "emi_loot.entity_predicate.type_specific.player.adv.crit_false": "hasn't finished %1$s task",
    "emi_loot.entity_predicate.type_specific.player.adv.crit_true": "has finished %1$s task",
    "emi_loot.entity_predicate.type_specific.player.adv.id_false": "hasn't completed the %s advancement",
    "emi_loot.entity_predicate.type_specific.player.adv.id_true": "has completed the %s advancement",
    "emi_loot.entity_predicate.type_specific.player.gamemode": "is in %s mode",
    "emi_loot.entity_predicate.type_specific.player.level": "has %s xp levels",
    "emi_loot.entity_predicate.type_specific.player.level_2": "has between %1$s and %2$s xp levels",
    "emi_loot.entity_predicate.type_specific.player.level_3": "has at least %1$s xp levels",
    "emi_loot.entity_predicate.type_specific.player.level_4": "has at most %1$s xp levels",
    "emi_loot.entity_predicate.type_specific.player.looking": "is looking at %s",
    "emi_loot.entity_predicate.type_specific.player.recipe_false": "doesn't know %s recipe",
    "emi_loot.entity_predicate.type_specific.player.recipe_true": "knows %s recipe",
    "emi_loot.entity_predicate.type_specific.player.stats.at_least": "at least %1$s times",
    "emi_loot.entity_predicate.type_specific.player.stats.at_most": "at most %1$s times",
    "emi_loot.entity_predicate.type_specific.player.stats.between": "between %1$s & %2$s times",
    "emi_loot.entity_predicate.type_specific.player.stats.exact": "%s times",
    "emi_loot.entity_predicate.type_specific.player.stats.fallback": "any number of times",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:broken": "has broken %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:crafted": "has crafted %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:custom": "has custom stat %1$s with %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:dropped": "has dropped %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:killed": "has killed %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:killed_by": "has ben killed by %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:mined": "has mined %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:picked_up": "has picked up %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.player.stats.type.minecraft:used": "has used %1$s %2$s",
    "emi_loot.entity_predicate.type_specific.rabbit": "that is a %s rabbit",
    "emi_loot.entity_predicate.type_specific.rabbit.black": "black",
    "emi_loot.entity_predicate.type_specific.rabbit.brown": "brown",
    "emi_loot.entity_predicate.type_specific.rabbit.evil": "evil",
    "emi_loot.entity_predicate.type_specific.rabbit.gold": "gold",
    "emi_loot.entity_predicate.type_specific.rabbit.salt": "salt",
    "emi_loot.entity_predicate.type_specific.rabbit.white": "white",
    "emi_loot.entity_predicate.type_specific.rabbit.white_splotched": "white-splotched",
    "emi_loot.entity_predicate.type_specific.slime": "that is a slime of size %s",
    "emi_loot.entity_predicate.type_specific.slime_2": "that is a slime between size %1$s & %2$s",
    "emi_loot.entity_predicate.type_specific.slime_3": "that is a slime of at least size %1$s",
    "emi_loot.entity_predicate.type_specific.slime_4": "that is a slime of at most size %1$s",
    "emi_loot.entity_predicate.type_specific.tropical_fish": "that is a %s tropical fish",
    "emi_loot.entity_predicate.type_specific.villager": "that is a %s villager",
    "emi_loot.entity_predicate.type_specific.villager.desert": "desert",
    "emi_loot.entity_predicate.type_specific.villager.jungle": "jungle",
    "emi_loot.entity_predicate.type_specific.villager.plains": "plains",
    "emi_loot.entity_predicate.type_specific.villager.savanna": "savanna",
    "emi_loot.entity_predicate.type_specific.villager.snow": "snow",
    "emi_loot.entity_predicate.type_specific.villager.swamp": "swamp",
    "emi_loot.entity_predicate.type_specific.villager.taiga": "taiga",
    "emi_loot.entity_predicate.type_specific.wolf": "that is a specific breed of wolf",
    "emi_loot.entity_predicate.type_tag": "that is in tag %s",
    "emi_loot.entity_predicate.vehicle": "riding %s",
    "emi_loot.fluid_predicate.base": "a fluid %s",
    "emi_loot.fluid_predicate.fluid": "that is %s",
    "emi_loot.fluid_predicate.tag": "in tag %s",
    "emi_loot.function.banner": "Applies a unique banner pattern",
    "emi_loot.function.bonus": "Bonus drops with %s",
    "emi_loot.function.copy_name": "Item copies its name from %s",
    "emi_loot.function.copy_name.block_entity": "this blocks block entity",
    "emi_loot.function.copy_name.killer": "this mobs killer",
    "emi_loot.function.copy_name.killer_direct": "this mobs direct killer",
    "emi_loot.function.copy_name.this": "this",
    "emi_loot.function.copy_nbt": "Custom NBT data is copied onto this item",
    "emi_loot.function.copy_state": "Block properties copied to the drop",
    "emi_loot.function.custom_model_data": "Gives the drop a custom item model",
    "emi_loot.function.damage": "Items damaged to approximately %s%%",
    "emi_loot.function.decay": "Must survive explosion",
    "emi_loot.function.fill_player_head": "Fills this player head in with identifying info",
    "emi_loot.function.filtered": "If %1$s then %2$s",
    "emi_loot.function.firework_explosion": "Adds a firework explosion with: %s",
    "emi_loot.function.firework_explosion.colors": "with colors: %s",
    "emi_loot.function.firework_explosion.fade_colors": "with fade colors: %s",
    "emi_loot.function.firework_explosion.no_trail": "without a trail",
    "emi_loot.function.firework_explosion.no_twinkle": "without twinkle",
    "emi_loot.function.firework_explosion.shape": "%s shape",
    "emi_loot.function.firework_explosion.trail": "with a trail",
    "emi_loot.function.firework_explosion.twinkle": "with twinkle",
    "emi_loot.function.fireworks": "Defines fireworks behavior",
    "emi_loot.function.limit_count": "Stack count is limited to %s",
    "emi_loot.function.looting": "Drops extra with looting",
    "emi_loot.function.lore": "Unique lore is added to this item",
    "emi_loot.function.map": "Creates a %s exploration map",
    "emi_loot.function.modify_contents": "Modifies contents of the container: %s",
    "emi_loot.function.ominous_banner": "Dropped by an illager raid captain",
    "emi_loot.function.ominous_bottle": "Sets the amplifier of the ominous bottle to %s",
    "emi_loot.function.potion": "Sets potion to %s",
    "emi_loot.function.randomly_enchanted_book": "Drops a random enchanted book",
    "emi_loot.function.randomly_enchanted_item": "Drops item with random enchants",
    "emi_loot.function.reference": "Custom un-parsable modifier %s is applied",
    "emi_loot.function.sequence": "%s",
    "emi_loot.function.set_any_damage": "Items damaged to any durability value",
    "emi_loot.function.set_attributes": "Performs the following entity attribute operations: %s",
    "emi_loot.function.set_attributes.add": "[adds %1$s to the %2$s attribute]",
    "emi_loot.function.set_attributes.multiply": "[multiplies the value of %2$s by %1$s]",
    "emi_loot.function.set_attributes.multiply_base": "[multiplies the base value of %2$s by %1$s and adds it to the current amount]",
    "emi_loot.function.set_book_cover": "Sets the cover of the book to %s",
    "emi_loot.function.set_contents": "Keeps block contents when broken",
    "emi_loot.function.set_count_add": "Drops extra items",
    "emi_loot.function.set_count_set": "Sets item count",
    "emi_loot.function.set_enchant_book": "Drops book with specific enchants",
    "emi_loot.function.set_enchant_item": "Drops item with specific enchants",
    "emi_loot.function.set_item": "Sets the dropped item to %s",
    "emi_loot.function.set_loot_table": "This item's loot table is set to %s",
    "emi_loot.function.set_nbt": "This items NBT is set with custom data",
    "emi_loot.function.set_stew": "Suspicious stew randomly given a status effect from among %s",
    "emi_loot.function.set_stew_unknown": "an unknown list of effects...",
    "emi_loot.function.smelt": "Drops smelted when on fire",
    "emi_loot.function.toggle_tooltip": "Toggles sections of the item tooltip on or off",
    "emi_loot.gameplay.minecraft:gameplay\/cat_morning_gift": "Cat Morning Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/fishing\/fish": "Fishing Fish Drops",
    "emi_loot.gameplay.minecraft:gameplay\/fishing\/junk": "Fishing Junk Drops",
    "emi_loot.gameplay.minecraft:gameplay\/fishing\/treasure": "Fishing Treasure Drops",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/armorer_gift": "Armorer Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/butcher_gift": "Butcher Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/cartographer_gift": "Cartographer Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/cleric_gift": "Cleric Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/farmer_gift": "Farmer Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/fisherman_gift": "Fisherman Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/fletcher_gift": "Fletcher Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/leatherworker_gift": "Leatherworker Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/librarian_gift": "Librarian Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/mason_gift": "Mason Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/shepherd_gift": "Shepherd Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/toolsmith_gift": "Toolsmith Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/hero_of_the_village\/weaponsmith_gift": "Weaponsmith Hero Gifts",
    "emi_loot.gameplay.minecraft:gameplay\/panda_sneeze": "Panda Sneeze",
    "emi_loot.gameplay.minecraft:gameplay\/piglin_bartering": "Piglin Bartering Drops",
    "emi_loot.gameplay.minecraft:gameplay\/sniffer_digging": "Sniffer Digging Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/failed_fishing\/junk": "Failed Fishing Junk Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/lava_fishing\/fish": "Lava Fishing Fish Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/lava_fishing\/junk": "Lava Fishing Junk Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/lava_fishing\/treasure": "Lava Fishing Treasure Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/nether_fishing\/fish": "Lava Fishing Fish Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/nether_fishing\/junk": "Lava Fishing Junk Drops",
    "emi_loot.gameplay.netherdepthsupgrade:gameplay\/nether_fishing\/treasure": "Lava Fishing Treasure Drops",
    "emi_loot.gameplay.unknown": "Unknown",
    "emi_loot.gameplay.unknown_gameplay": "%s Gameplay Drops",
    "emi_loot.hoe.diamond": "Needs or prefers a diamond+ hoe",
    "emi_loot.hoe.iron": "Needs or prefers a iron+ hoe",
    "emi_loot.hoe.netherite": "Needs or prefers a netherite+ hoe",
    "emi_loot.hoe.stone": "Needs or prefers a stone+ hoe",
    "emi_loot.hoe.wood": "Needs or prefers any hoe",
    "emi_loot.item_predicate.count": "with a certain count between %1$s and %2$s",
    "emi_loot.item_predicate.damage": "with a certain missing durability between %1$s and %2$s",
    "emi_loot.item_predicate.durability": "with a certain durability between %1$s and %2$s",
    "emi_loot.item_predicate.enchant": "with %s",
    "emi_loot.item_predicate.enchant.levels": "%1$s %2$s",
    "emi_loot.item_predicate.enchant.levels_1": "exactly level %s",
    "emi_loot.item_predicate.enchant.levels_2": "between level %1$s and %2$s",
    "emi_loot.item_predicate.enchant.levels_3": "at least level %s",
    "emi_loot.item_predicate.enchant.levels_4": "at most level %s",
    "emi_loot.item_predicate.enchant.list": "that is %s",
    "emi_loot.item_predicate.enchant.tag": "in tag %s",
    "emi_loot.item_predicate.items": "that is %s",
    "emi_loot.item_predicate.tag": "in tag %s",
    "emi_loot.location_predicate.base": "located %s",
    "emi_loot.location_predicate.biome.list": "in %s",
    "emi_loot.location_predicate.biome.tag": "in tag %s",
    "emi_loot.location_predicate.block": "in %s",
    "emi_loot.location_predicate.dim": "in the %s dimension",
    "emi_loot.location_predicate.fluid": "in %s",
    "emi_loot.location_predicate.light": "in light level %s",
    "emi_loot.location_predicate.light_2": "in light between levels %1$s & %2$s",
    "emi_loot.location_predicate.smoke_false": "that isn't smoky",
    "emi_loot.location_predicate.smoke_true": "that is smoky",
    "emi_loot.location_predicate.structure.list": "inside a %s",
    "emi_loot.location_predicate.structure.tag": "in tag %s",
    "emi_loot.location_predicate.x": "between %1$s and %2$s on the X axis",
    "emi_loot.location_predicate.x.at_least": "at least %1$s on the X axis",
    "emi_loot.location_predicate.x.at_most": "at most %1$s on the X axis",
    "emi_loot.location_predicate.x.exact": "exactly %1$s on the X axis",
    "emi_loot.location_predicate.y": "between %1$s and %2$s on the Y axis",
    "emi_loot.location_predicate.y.at_least": "at least %1$s on the Y axis",
    "emi_loot.location_predicate.y.at_most": "at most %1$s on the Y axis",
    "emi_loot.location_predicate.y.exact": "exactly %1$s on the Y axis",
    "emi_loot.location_predicate.z": "between %1$s and %2$s on the Z axis",
    "emi_loot.location_predicate.z.at_least": "at least %1$s on the Z axis",
    "emi_loot.location_predicate.z.at_most": "at most %1$s on the Z axis",
    "emi_loot.location_predicate.z.exact": "exactly %1$s on the Z axis",
    "emi_loot.map.dolphin_located": "Dolphin-Located",
    "emi_loot.map.eye_of_ender_located": "Stronghold",
    "emi_loot.map.mineshaft": "Mineshaft",
    "emi_loot.map.ocean_ruin": "Ocean Ruin",
    "emi_loot.map.on_ocean_explorer_maps": "Ocean",
    "emi_loot.map.on_treasure_maps": "Buried Treasure",
    "emi_loot.map.on_woodland_explorer_maps": "Woodland",
    "emi_loot.map.ruined_portal": "Ruined Portal",
    "emi_loot.map.shipwreck": "Shipwreck",
    "emi_loot.map.unknown": "Unknown",
    "emi_loot.map.village": "Village",
    "emi_loot.missing_entity": "Unknown Entity",
    "emi_loot.missing_key": "Missing or malformed function\/condition",
    "emi_loot.no_conditions": "No conditions",
    "emi_loot.number_provider.binomial": "the result of %1$s tests of a binomial distribution of period $2%s (average %3$s)",
    "emi_loot.number_provider.constant": "exactly %s",
    "emi_loot.number_provider.score": "the %1$s score of an entity, scaled by %3$s times",
    "emi_loot.number_provider.uniform": "between %1$s & %2$s (average %3$s)",
    "emi_loot.number_provider.unknown": "an unknown value",
    "emi_loot.operator.any": "greater than or equal to: %s",
    "emi_loot.operator.between": "between: A:[%1$s] & B:[%2$s]",
    "emi_loot.operator.max": "less than or equal to: %s",
    "emi_loot.operator.min": "greater than or equal to: %s",
    "emi_loot.percent_chance": "%s%% Chance",
    "emi_loot.percentage": "%s%%",
    "emi_loot.pickaxe.diamond": "Needs or prefers a diamond+ pickaxe",
    "emi_loot.pickaxe.iron": "Needs or prefers a iron+ pickaxe",
    "emi_loot.pickaxe.netherite": "Needs or prefers a netherite+ pickaxe",
    "emi_loot.pickaxe.stone": "Needs or prefers a stone+ pickaxe",
    "emi_loot.pickaxe.wood": "Needs or prefers any pickaxe",
    "emi_loot.predicate.and_2": "%1$s & %2$s",
    "emi_loot.predicate.and_3": "%1$s, %2$s",
    "emi_loot.predicate.attribute": "has certain attribute modifiers",
    "emi_loot.predicate.component": "with custom components",
    "emi_loot.predicate.container": "that contains certain items",
    "emi_loot.predicate.firework.no_trail": "that doesn't have a trail",
    "emi_loot.predicate.firework.no_twinkle": "that doesn't have a twinkle",
    "emi_loot.predicate.firework.shape": "that has a %s explosion shape",
    "emi_loot.predicate.firework.trail": "that has a trail",
    "emi_loot.predicate.firework.twinkle": "that has a twinkle",
    "emi_loot.predicate.fireworks": "is a firework with certain characteristics",
    "emi_loot.predicate.invalid": "INVALID",
    "emi_loot.predicate.or_2": "%1$s or %2$s",
    "emi_loot.predicate.or_3": "%1$s, %2$s",
    "emi_loot.predicate.potion.list": "that is %s",
    "emi_loot.predicate.potion.tag": "in tag %s",
    "emi_loot.predicate.trim": "has certain trim",
    "emi_loot.predicate.writable_book": "has certain written contents",
    "emi_loot.rolls": "%s rolls",
    "emi_loot.rolls_visible": "%s r",
    "emi_loot.shovel.diamond": "Needs or prefers a diamond+ shovel",
    "emi_loot.shovel.iron": "Needs or prefers a iron+ shovel",
    "emi_loot.shovel.netherite": "Needs or prefers a netherite+ shovel",
    "emi_loot.shovel.stone": "Needs or prefers a stone+ shovel",
    "emi_loot.shovel.wood": "Needs or prefers any shovel",
    "emi_loot.state_predicate.base": "with state %s",
    "emi_loot.state_predicate.state_between": "%1$s: between %2$s & %3$s",
    "emi_loot.state_predicate.state_exact": "%1$s: %2$s",
    "enchantment.emi_loot.random": "Randomly Enchanted",
    "enchantment.emi_loot.random.desc": "Random enchantments applied are applied to this drop from the available list."
}